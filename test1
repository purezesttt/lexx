--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.9) ~  Much Love, Ferib 

]]--

local TABLE_TableIndirection = {};
TABLE_TableIndirection["adcc%0"] = {};
TABLE_TableIndirection["adcc%0"].give = function()
	return 16045691000000000000;
end;
TABLE_TableIndirection["hardcoded%0"] = TABLE_TableIndirection["adcc%0"].give();
local function toHex(str)
	TABLE_TableIndirection["hex%0"] = {};
	for i = 1, #str do
		TABLE_TableIndirection["hex%0"][#TABLE_TableIndirection["hex%0"] + 1] = string.format("%02x", string.byte(str, i));
	end
	return table.concat(TABLE_TableIndirection["hex%0"]);
end
local function fromHex(hex)
	TABLE_TableIndirection["str%0"] = {};
	for i = 1, #hex, 2 do
		TABLE_TableIndirection["byte%0"] = tonumber(hex:sub(i, i + 1), 16);
		TABLE_TableIndirection["str%0"][#TABLE_TableIndirection["str%0"] + 1] = string.char(TABLE_TableIndirection["byte%0"]);
	end
	return table.concat(TABLE_TableIndirection["str%0"]);
end
TABLE_TableIndirection["adcc%0"].decrypt = function(hexEncrypted, key)
	if (#hexEncrypted < 8) then
		return "";
	end
	TABLE_TableIndirection["signature%0"] = hexEncrypted:sub(-8);
	TABLE_TableIndirection["mainData%0"] = hexEncrypted:sub(1, -9);
	key = tonumber(key) or 42;
	TABLE_TableIndirection["expectedSig%0"] = string.format("%08x", ((key * #TABLE_TableIndirection["mainData%0"]) / 2) % 4294967295);
	if (TABLE_TableIndirection["signature%0"] ~= TABLE_TableIndirection["expectedSig%0"]) then
		return "";
	end
	TABLE_TableIndirection["binaryData%0"] = fromHex(TABLE_TableIndirection["mainData%0"]);
	if (#TABLE_TableIndirection["binaryData%0"] == 0) then
		return "";
	end
	local function expandKey(key, length)
		TABLE_TableIndirection["expanded%0"] = {};
		TABLE_TableIndirection["keyStr%0"] = tostring(key);
		TABLE_TableIndirection["hash%0"] = 0;
		for i = 1, length do
			TABLE_TableIndirection["char%0"] = string.byte(TABLE_TableIndirection["keyStr%0"], (i % #TABLE_TableIndirection["keyStr%0"]) + 1);
			TABLE_TableIndirection["hash%0"] = ((TABLE_TableIndirection["hash%0"] * 31) + TABLE_TableIndirection["char%0"] + (i * 997)) % 256;
			TABLE_TableIndirection["pos%0"] = (((i * TABLE_TableIndirection["char%0"]) + TABLE_TableIndirection["hash%0"]) % #TABLE_TableIndirection["keyStr%0"]) + 1;
			TABLE_TableIndirection["val%0"] = string.byte(TABLE_TableIndirection["keyStr%0"], TABLE_TableIndirection["pos%0"]);
			TABLE_TableIndirection["mixed%0"] = bit32.bxor(TABLE_TableIndirection["val%0"], TABLE_TableIndirection["hash%0"], i % 256);
			TABLE_TableIndirection["expanded%0"][i] = (TABLE_TableIndirection["mixed%0"] + (i * 7)) % 256;
		end
		return TABLE_TableIndirection["expanded%0"];
	end
	TABLE_TableIndirection["keySchedule%0"] = expandKey(key, #TABLE_TableIndirection["binaryData%0"] * 3);
	TABLE_TableIndirection["plaintext%0"] = {};
	TABLE_TableIndirection["keyIndex%0"] = 1;
	for i = 1, #TABLE_TableIndirection["binaryData%0"] do
		TABLE_TableIndirection["byte%0"] = string.byte(TABLE_TableIndirection["binaryData%0"], i);
		TABLE_TableIndirection["original%0"] = ((TABLE_TableIndirection["byte%0"] - (i * 3)) - TABLE_TableIndirection["keySchedule%0"][#TABLE_TableIndirection["binaryData%0"] + i]) % 256;
		TABLE_TableIndirection["plaintext%0"][i] = string.char(TABLE_TableIndirection["original%0"]);
	end
	TABLE_TableIndirection["feedback%0"] = 0;
	for i = 1, #TABLE_TableIndirection["plaintext%0"] do
		TABLE_TableIndirection["byte%0"] = string.byte(TABLE_TableIndirection["plaintext%0"][i]);
		TABLE_TableIndirection["derotated%0"] = bit32.bxor(TABLE_TableIndirection["byte%0"], TABLE_TableIndirection["feedback%0"]);
		TABLE_TableIndirection["feedback%0"] = (TABLE_TableIndirection["feedback%0"] + TABLE_TableIndirection["derotated%0"]) % 256;
		TABLE_TableIndirection["plaintext%0"][i] = string.char(TABLE_TableIndirection["derotated%0"]);
	end
	for i = 1, #TABLE_TableIndirection["plaintext%0"] do
		TABLE_TableIndirection["byte%0"] = string.byte(TABLE_TableIndirection["plaintext%0"][i]);
		TABLE_TableIndirection["decrypted%0"] = bit32.bxor(TABLE_TableIndirection["byte%0"], TABLE_TableIndirection["keySchedule%0"][TABLE_TableIndirection["keyIndex%0"]]);
		TABLE_TableIndirection["plaintext%0"][i] = string.char(TABLE_TableIndirection["decrypted%0"]);
		TABLE_TableIndirection["keyIndex%0"] = TABLE_TableIndirection["keyIndex%0"] + 1;
	end
	return table.concat(TABLE_TableIndirection["plaintext%0"]);
end;
TABLE_TableIndirection["adcc%0"].secure_loadstring = function()
	TABLE_TableIndirection["original_globals%0"] = getfenv(0);
	TABLE_TableIndirection["real_loadstring%0"] = TABLE_TableIndirection["original_globals%0"].loadstring;
	if (not TABLE_TableIndirection["real_loadstring%0"] or (type(TABLE_TableIndirection["real_loadstring%0"]) ~= "function")) then
		return function(code)
			return function()
			end;
		end;
	end
	TABLE_TableIndirection["funcStr%0"] = tostring(TABLE_TableIndirection["real_loadstring%0"]);
	if not (TABLE_TableIndirection["funcStr%0"]:match("^function: 0x%x+$") or TABLE_TableIndirection["funcStr%0"]:match("^builtin function: loadstring$")) then
		return function(code)
			return function()
			end;
		end;
	end
	return function(code)
		local chunk, err = TABLE_TableIndirection["real_loadstring%0"](code);
		if not chunk then
			return function()
			end;
		end
		return chunk;
	end;
end;
TABLE_TableIndirection["adcc%0"].l = function(encrypted_code)
	TABLE_TableIndirection["scy%0"] = pcall(function()
		return loadstring([[return "nope, try again: https://www.youtube.com/watch?v=ZNGqBDRJgvo"]])();
	end);
	if TABLE_TableIndirection["scy%0"] then
		TABLE_TableIndirection["decrypted_code%0"] = TABLE_TableIndirection["adcc%0"].decrypt(encrypted_code, TABLE_TableIndirection["hardcoded%0"]);
		TABLE_TableIndirection["loader%0"] = TABLE_TableIndirection["adcc%0"].secure_loadstring();
		TABLE_TableIndirection["loader%0"](TABLE_TableIndirection["decrypted_code%0"])();
	end
end;
return TABLE_TableIndirection["adcc%0"];
